<?php

// --- Function 1: getEvenNumbers (Traditional Iterator Approach) ---

// Defines a function 'getEvenNumbers' that generates a sequence of even numbers up to a given maximum.
// It returns an 'Iterator' object, specifically an 'ArrayIterator'.
function getEvenNumbers(int $maximumLimit): Iterator
{
    // Initializes an empty array to store the even numbers.
    $numbersArray = [];
    // Loops from 1 up to the specified maximum limit.
    for ($i = 1; $i <= $maximumLimit; $i++) {
        // Checks if the current number is even (remainder when divided by 2 is 0).
        if ($i % 2 == 0) {
            // If even, adds the number to the array.
            $numbersArray[] = $i;
        }
    }
    // Returns a new ArrayIterator instance, which makes the array iterable.
    // This approach builds the *entire* array in memory before returning it.
    return new ArrayIterator($numbersArray);
}

// Iterates over the even numbers generated by 'getEvenNumbers' up to 100.
// This loop consumes the ArrayIterator returned by the function.
foreach (getEvenNumbers(100) as $value) {
    echo "Even Number : $value" . PHP_EOL;
}

echo "---" . PHP_EOL; // Separator for clarity

// --- Function 2: getOddNumbers (Generator Approach using 'yield') ---

// Defines a function 'getOddNumbers' that generates a sequence of odd numbers up to a given maximum.
// The presence of 'yield' automatically makes this function a **Generator**.
// A Generator implicitly implements the 'Iterator' interface.
function getOddNumbers(int $maximumLimit): Iterator
{
    // Loops from 1 up to the specified maximum limit.
    for ($i = 1; $i <= $maximumLimit; $i++) {
        // Checks if the current number is odd (remainder when divided by 2 is 1).
        if ($i % 2 == 1) {
            // 'yield' returns a value to the caller without exiting the function.
            // The function's state is preserved, and it can resume from this point
            // on the next iteration. This means values are generated *on demand*,
            // not all at once, leading to better memory efficiency for large sets.
            yield $i;
        }
    }
}

// Iterates over the odd numbers generated by 'getOddNumbers' up to 100.
// This loop directly interacts with the Generator created by the function.
foreach (getOddNumbers(100) as $value) {
    echo "Odd Number : $value" . PHP_EOL;
}
